# HSH(1) - Simple Shell Manual

## NAME
**hsh** - simple shell, a command language interpreter

## SYNOPSIS
**hsh** [options] [file]

## DESCRIPTION
**hsh** is a simple command language interpreter that executes commands read from the standard input or from a file. It is a basic implementation of a UNIX shell that provides fundamental shell functionality including command execution, built-in commands, PATH-based command resolution, and proper exit status handling.

The shell automatically detects whether it's running in interactive or non-interactive mode and adjusts its behavior accordingly.

## INVOCATION
The shell can be invoked in several ways:

### Interactive Mode
```bash
hsh
```
When invoked without arguments and with a terminal as stdin, **hsh** runs in interactive mode, displaying a prompt (`$ `) and waiting for user input.

### Non-Interactive Mode
```bash
hsh < script.sh
echo "command" | hsh
```
When input is redirected, piped, or not from a terminal, **hsh** runs in non-interactive mode without displaying prompts.

## SHELL GRAMMAR

### Simple Commands
A simple command is a sequence of words separated by blanks, tabs, or newlines. The first word specifies the command to be executed, and the remaining words are passed as arguments to that command.

```
command [arg1] [arg2] ... [argN]
```

### Command Line Processing
1. **Input Reading**: Commands are read line by line using `getline()`
2. **Tokenization**: Lines are split into tokens on whitespace (`space`, `tab`, `\r`, `\n`)
3. **Command Resolution**: First token is resolved to an executable path
4. **Execution**: Command is executed in a child process
5. **Status Collection**: Exit status is collected and tracked

### Command Execution Order
Commands are executed in the following order:
1. **Built-in Check**: Check if the command is a built-in command
2. **Path Resolution**: If not built-in, resolve command path using PATH
3. **Process Creation**: Fork a child process for execution
4. **Command Execution**: Execute the command using `execve()`
5. **Status Collection**: Wait for completion and collect exit status

## BUILT-IN COMMANDS

### exit
**Description**: Cause the shell to exit with the exit status of the last executed command.

**Syntax**: `exit`

**Parameters**: None (current implementation doesn't accept status arguments)

**Behavior**:
- Terminates the shell immediately
- Returns the exit status of the most recently executed command
- Performs cleanup of all allocated resources
- In interactive mode, exits gracefully without error message

**Examples**:
```bash
$ ls              # Execute a command
$ exit            # Exit with status of 'ls' command
```

**Implementation Notes**:
- Built-in handler returns -1 to signal shell termination
- Main loop calls `exit(last_status)` when -1 is returned
- Memory cleanup is performed before exit

### env
**Description**: Print all environment variables to standard output.

**Syntax**: `env`

**Parameters**: None

**Behavior**:
- Prints each environment variable on a separate line
- Format: `VARIABLE=value`
- Variables are printed in the order they appear in the `environ` array
- No sorting or filtering is applied

**Examples**:
```bash
$ env
PATH=/usr/local/bin:/usr/bin:/bin
HOME=/home/user
USER=user
SHELL=/bin/bash
PWD=/current/directory
LANG=en_US.UTF-8
```

**Implementation Notes**:
- Accesses global `environ` array directly
- Iterates through array until NULL terminator
- Uses `printf()` for output formatting

## COMMAND RESOLUTION

### Path Resolution Algorithm
The shell uses a comprehensive path resolution algorithm:

1. **Direct Path Check**: 
   - If command contains a slash (`/`), treat as absolute or relative path
   - Use `stat()` to verify file existence
   - Return original command string if file exists
   - Return NULL if file doesn't exist

2. **PATH Environment Variable Search**:
   - Extract PATH from environment variables
   - Split PATH into directories using colon (`:`) as delimiter
   - For each directory in PATH:
     - Construct full path: `directory/command`
     - Check file existence using `stat()`
     - Return first valid path found

3. **Search Termination**:
   - Return NULL if command not found in any PATH directory
   - Results in "command not found" error

### PATH Environment Variable
The PATH variable contains a colon-separated list of directories where the shell searches for commands:

```
PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
```

### Search Order
1. **Absolute paths** (starting with `/`): `/bin/ls`, `/usr/bin/grep`
2. **Relative paths** (containing `/`): `./program`, `../bin/command`
3. **PATH directories** (searched left to right): Commands without `/`

### Command Validation
- **File Existence**: Verified using `stat()` system call
- **Path Construction**: Dynamic memory allocation for full paths
- **Error Handling**: Proper cleanup on allocation failures
- **Memory Management**: Allocated paths are freed after use

## INPUT/OUTPUT

### Interactive Mode
- **Prompt Display**: Shows `$ ` prompt before each command
- **Prompt Detection**: Uses `isatty(STDIN_FILENO)` to detect terminal
- **Line Reading**: Uses `getline()` for flexible input handling
- **EOF Handling**: Graceful exit on Ctrl+D (EOF)

### Non-Interactive Mode
- **No Prompts**: Runs silently without displaying prompts
- **Pipe Support**: Accepts input from pipes: `echo "ls" | hsh`
- **Redirection Support**: Accepts input from files: `hsh < script.sh`
- **Here Documents**: Supports here document input

### Input Processing
- **Dynamic Allocation**: Input lines are dynamically allocated
- **Whitespace Handling**: Tokens separated by space, tab, carriage return, newline
- **Empty Lines**: Empty lines and lines with only whitespace are ignored
- **Memory Management**: Input lines are freed after processing

## ERROR HANDLING

### Error Message Format
All error messages follow the standardized format:
```
program_name: line_number: command: error_message
```

Where:
- `program_name`: Name of the shell executable (from `argv[0]`)
- `line_number`: Line number where error occurred (tracked internally)
- `command`: Command that caused the error
- `error_message`: Descriptive error message

### Common Error Types

#### Command Not Found
```bash
./hsh: 1: invalidcommand: not found
```
**Exit Status**: 127  
**Cause**: Command not found in PATH or at specified path  
**Output**: Error message to stderr

#### File Not Found (Absolute/Relative Paths)
```bash
./hsh: 2: /bin/nonexistent: not found
```
**Exit Status**: 127  
**Cause**: Specified file path does not exist  
**Output**: Error message to stderr

#### Fork Failure
```bash
fork: Resource temporarily unav
